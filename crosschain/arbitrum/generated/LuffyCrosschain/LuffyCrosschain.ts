// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BetAmountSet extends ethereum.Event {
  get params(): BetAmountSet__Params {
    return new BetAmountSet__Params(this);
  }
}

export class BetAmountSet__Params {
  _event: BetAmountSet;

  constructor(event: BetAmountSet) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BetPlaced extends ethereum.Event {
  get params(): BetPlaced__Params {
    return new BetPlaced__Params(this);
  }
}

export class BetPlaced__Params {
  _event: BetPlaced;

  constructor(event: BetPlaced) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get Prediction(): BetPlacedPredictionStruct {
    return changetype<BetPlacedPredictionStruct>(
      this._event.parameters[2].value.toTuple(),
    );
  }
}

export class BetPlacedPredictionStruct extends ethereum.Tuple {
  get squadHash(): Bytes {
    return this[0].toBytes();
  }

  get amountInWei(): BigInt {
    return this[1].toBigInt();
  }

  get token(): i32 {
    return this[2].toI32();
  }

  get captain(): i32 {
    return this[3].toI32();
  }

  get viceCaptain(): i32 {
    return this[4].toI32();
  }

  get isRandom(): boolean {
    return this[5].toBoolean();
  }
}

export class CrosschainAddressesSet extends ethereum.Event {
  get params(): CrosschainAddressesSet__Params {
    return new CrosschainAddressesSet__Params(this);
  }
}

export class CrosschainAddressesSet__Params {
  _event: CrosschainAddressesSet;

  constructor(event: CrosschainAddressesSet) {
    this._event = event;
  }

  get destinationSelectors(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get destinationAddresses(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class CrosschainMessageSent extends ethereum.Event {
  get params(): CrosschainMessageSent__Params {
    return new CrosschainMessageSent__Params(this);
  }
}

export class CrosschainMessageSent__Params {
  _event: CrosschainMessageSent;

  constructor(event: CrosschainMessageSent) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class CrosschainReceived extends ethereum.Event {
  get params(): CrosschainReceived__Params {
    return new CrosschainReceived__Params(this);
  }
}

export class CrosschainReceived__Params {
  _event: CrosschainReceived;

  constructor(event: CrosschainReceived) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LuffyCrosschain__gameToPredictionResult {
  value0: Bytes;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: boolean;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4)),
    );
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getSquadHash(): Bytes {
    return this.value0;
  }

  getAmountInWei(): BigInt {
    return this.value1;
  }

  getToken(): i32 {
    return this.value2;
  }

  getCaptain(): i32 {
    return this.value3;
  }

  getViceCaptain(): i32 {
    return this.value4;
  }

  getIsRandom(): boolean {
    return this.value5;
  }
}

export class LuffyCrosschain__vrfRequestsResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getGameId(): BigInt {
    return this.value0;
  }

  getPlayer(): Address {
    return this.value1;
  }
}

export class LuffyCrosschain extends ethereum.SmartContract {
  static bind(address: Address): LuffyCrosschain {
    return new LuffyCrosschain("LuffyCrosschain", address);
  }

  BET_AMOUNT_IN_USDC(): BigInt {
    let result = super.call(
      "BET_AMOUNT_IN_USDC",
      "BET_AMOUNT_IN_USDC():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BET_AMOUNT_IN_USDC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BET_AMOUNT_IN_USDC",
      "BET_AMOUNT_IN_USDC():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DESTINATION_CHAIN_SELECTOR(): BigInt {
    let result = super.call(
      "DESTINATION_CHAIN_SELECTOR",
      "DESTINATION_CHAIN_SELECTOR():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_DESTINATION_CHAIN_SELECTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DESTINATION_CHAIN_SELECTOR",
      "DESTINATION_CHAIN_SELECTOR():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ETH_USD_PRICE_FEED(): Address {
    let result = super.call(
      "ETH_USD_PRICE_FEED",
      "ETH_USD_PRICE_FEED():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_ETH_USD_PRICE_FEED(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ETH_USD_PRICE_FEED",
      "ETH_USD_PRICE_FEED():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LINK_TOKEN(): Address {
    let result = super.call("LINK_TOKEN", "LINK_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_LINK_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("LINK_TOKEN", "LINK_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LINK_USD_PRICE_FEED(): Address {
    let result = super.call(
      "LINK_USD_PRICE_FEED",
      "LINK_USD_PRICE_FEED():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_LINK_USD_PRICE_FEED(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "LINK_USD_PRICE_FEED",
      "LINK_USD_PRICE_FEED():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDC_TOKEN(): Address {
    let result = super.call("USDC_TOKEN", "USDC_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_USDC_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC_TOKEN", "USDC_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  VRF_WRAPPER(): Address {
    let result = super.call("VRF_WRAPPER", "VRF_WRAPPER():(address)", []);

    return result[0].toAddress();
  }

  try_VRF_WRAPPER(): ethereum.CallResult<Address> {
    let result = super.tryCall("VRF_WRAPPER", "VRF_WRAPPER():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  crosschainAddresses(param0: BigInt): Address {
    let result = super.call(
      "crosschainAddresses",
      "crosschainAddresses(uint64):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_crosschainAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "crosschainAddresses",
      "crosschainAddresses(uint64):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gameToPrediction(
    param0: BigInt,
    param1: Address,
  ): LuffyCrosschain__gameToPredictionResult {
    let result = super.call(
      "gameToPrediction",
      "gameToPrediction(uint256,address):(bytes32,uint256,uint8,uint8,uint8,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return new LuffyCrosschain__gameToPredictionResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBoolean(),
    );
  }

  try_gameToPrediction(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<LuffyCrosschain__gameToPredictionResult> {
    let result = super.tryCall(
      "gameToPrediction",
      "gameToPrediction(uint256,address):(bytes32,uint256,uint8,uint8,uint8,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LuffyCrosschain__gameToPredictionResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBoolean(),
      ),
    );
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", "getBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBetValue(amountInUSD: BigInt, _token: i32): BigInt {
    let result = super.call(
      "getBetValue",
      "getBetValue(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInUSD),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_token)),
      ],
    );

    return result[0].toBigInt();
  }

  try_getBetValue(
    amountInUSD: BigInt,
    _token: i32,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBetValue",
      "getBetValue(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInUSD),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_token)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCrosschainFee(
    _gameId: BigInt,
    _squadHash: Bytes,
    _token: i32,
    _captain: i32,
    _viceCaptain: i32,
    _isRandom: boolean,
  ): BigInt {
    let result = super.call(
      "getCrosschainFee",
      "getCrosschainFee(uint256,bytes32,uint8,uint8,uint8,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromFixedBytes(_squadHash),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_token)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_captain)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_viceCaptain)),
        ethereum.Value.fromBoolean(_isRandom),
      ],
    );

    return result[0].toBigInt();
  }

  try_getCrosschainFee(
    _gameId: BigInt,
    _squadHash: Bytes,
    _token: i32,
    _captain: i32,
    _viceCaptain: i32,
    _isRandom: boolean,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCrosschainFee",
      "getCrosschainFee(uint256,bytes32,uint8,uint8,uint8,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromFixedBytes(_squadHash),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_token)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_captain)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_viceCaptain)),
        ethereum.Value.fromBoolean(_isRandom),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLinkToken(): Address {
    let result = super.call("getLinkToken", "getLinkToken():(address)", []);

    return result[0].toAddress();
  }

  try_getLinkToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("getLinkToken", "getLinkToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRandomnessPriceInNative(_gasPriceInWei: BigInt): BigInt {
    let result = super.call(
      "getRandomnessPriceInNative",
      "getRandomnessPriceInNative(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_gasPriceInWei)],
    );

    return result[0].toBigInt();
  }

  try_getRandomnessPriceInNative(
    _gasPriceInWei: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRandomnessPriceInNative",
      "getRandomnessPriceInNative(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_gasPriceInWei)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRouter(): Address {
    let result = super.call("getRouter", "getRouter():(address)", []);

    return result[0].toAddress();
  }

  try_getRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRouter", "getRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  i_vrfV2PlusWrapper(): Address {
    let result = super.call(
      "i_vrfV2PlusWrapper",
      "i_vrfV2PlusWrapper():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_i_vrfV2PlusWrapper(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "i_vrfV2PlusWrapper",
      "i_vrfV2PlusWrapper():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numWords(): BigInt {
    let result = super.call("numWords", "numWords():(uint32)", []);

    return result[0].toBigInt();
  }

  try_numWords(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numWords", "numWords():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolAddress(): Address {
    let result = super.call(
      "protocolAddress",
      "protocolAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_protocolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolAddress",
      "protocolAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestConfirmations(): i32 {
    let result = super.call(
      "requestConfirmations",
      "requestConfirmations():(uint16)",
      [],
    );

    return result[0].toI32();
  }

  try_requestConfirmations(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "requestConfirmations",
      "requestConfirmations():(uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  valueBalance(param0: Address): BigInt {
    let result = super.call("valueBalance", "valueBalance(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_valueBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "valueBalance",
      "valueBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vrfCallbackGasLimit(): BigInt {
    let result = super.call(
      "vrfCallbackGasLimit",
      "vrfCallbackGasLimit():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_vrfCallbackGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vrfCallbackGasLimit",
      "vrfCallbackGasLimit():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vrfRequests(param0: BigInt): LuffyCrosschain__vrfRequestsResult {
    let result = super.call(
      "vrfRequests",
      "vrfRequests(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new LuffyCrosschain__vrfRequestsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
    );
  }

  try_vrfRequests(
    param0: BigInt,
  ): ethereum.CallResult<LuffyCrosschain__vrfRequestsResult> {
    let result = super.tryCall(
      "vrfRequests",
      "vrfRequests(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LuffyCrosschain__vrfRequestsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _protocolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vrfWrapper(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ccipRouter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _usdcToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _linkToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _priceFeeds(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class CcipReceiveCall extends ethereum.Call {
  get inputs(): CcipReceiveCall__Inputs {
    return new CcipReceiveCall__Inputs(this);
  }

  get outputs(): CcipReceiveCall__Outputs {
    return new CcipReceiveCall__Outputs(this);
  }
}

export class CcipReceiveCall__Inputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }

  get message(): CcipReceiveCallMessageStruct {
    return changetype<CcipReceiveCallMessageStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CcipReceiveCall__Outputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }
}

export class CcipReceiveCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<CcipReceiveCallMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<CcipReceiveCallMessageDestTokenAmountsStruct>();
  }
}

export class CcipReceiveCallMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class MakeSquadAndPlaceBetCall extends ethereum.Call {
  get inputs(): MakeSquadAndPlaceBetCall__Inputs {
    return new MakeSquadAndPlaceBetCall__Inputs(this);
  }

  get outputs(): MakeSquadAndPlaceBetCall__Outputs {
    return new MakeSquadAndPlaceBetCall__Outputs(this);
  }
}

export class MakeSquadAndPlaceBetCall__Inputs {
  _call: MakeSquadAndPlaceBetCall;

  constructor(call: MakeSquadAndPlaceBetCall) {
    this._call = call;
  }

  get _gameId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _squadHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _token(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _captain(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _viceCaptain(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class MakeSquadAndPlaceBetCall__Outputs {
  _call: MakeSquadAndPlaceBetCall;

  constructor(call: MakeSquadAndPlaceBetCall) {
    this._call = call;
  }
}

export class MakeSquadAndPlaceBetRandomCall extends ethereum.Call {
  get inputs(): MakeSquadAndPlaceBetRandomCall__Inputs {
    return new MakeSquadAndPlaceBetRandomCall__Inputs(this);
  }

  get outputs(): MakeSquadAndPlaceBetRandomCall__Outputs {
    return new MakeSquadAndPlaceBetRandomCall__Outputs(this);
  }
}

export class MakeSquadAndPlaceBetRandomCall__Inputs {
  _call: MakeSquadAndPlaceBetRandomCall;

  constructor(call: MakeSquadAndPlaceBetRandomCall) {
    this._call = call;
  }

  get _gameId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _squadHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _token(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class MakeSquadAndPlaceBetRandomCall__Outputs {
  _call: MakeSquadAndPlaceBetRandomCall;

  constructor(call: MakeSquadAndPlaceBetRandomCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get _requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RequestCall extends ethereum.Call {
  get inputs(): RequestCall__Inputs {
    return new RequestCall__Inputs(this);
  }

  get outputs(): RequestCall__Outputs {
    return new RequestCall__Outputs(this);
  }
}

export class RequestCall__Inputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }
}

export class RequestCall__Outputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetBetAmountInUSDCCall extends ethereum.Call {
  get inputs(): SetBetAmountInUSDCCall__Inputs {
    return new SetBetAmountInUSDCCall__Inputs(this);
  }

  get outputs(): SetBetAmountInUSDCCall__Outputs {
    return new SetBetAmountInUSDCCall__Outputs(this);
  }
}

export class SetBetAmountInUSDCCall__Inputs {
  _call: SetBetAmountInUSDCCall;

  constructor(call: SetBetAmountInUSDCCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBetAmountInUSDCCall__Outputs {
  _call: SetBetAmountInUSDCCall;

  constructor(call: SetBetAmountInUSDCCall) {
    this._call = call;
  }
}

export class SetCallbackGasLimitCall extends ethereum.Call {
  get inputs(): SetCallbackGasLimitCall__Inputs {
    return new SetCallbackGasLimitCall__Inputs(this);
  }

  get outputs(): SetCallbackGasLimitCall__Outputs {
    return new SetCallbackGasLimitCall__Outputs(this);
  }
}

export class SetCallbackGasLimitCall__Inputs {
  _call: SetCallbackGasLimitCall;

  constructor(call: SetCallbackGasLimitCall) {
    this._call = call;
  }

  get _vrfCallbackGasLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCallbackGasLimitCall__Outputs {
  _call: SetCallbackGasLimitCall;

  constructor(call: SetCallbackGasLimitCall) {
    this._call = call;
  }
}

export class SetCrosschainAddressesCall extends ethereum.Call {
  get inputs(): SetCrosschainAddressesCall__Inputs {
    return new SetCrosschainAddressesCall__Inputs(this);
  }

  get outputs(): SetCrosschainAddressesCall__Outputs {
    return new SetCrosschainAddressesCall__Outputs(this);
  }
}

export class SetCrosschainAddressesCall__Inputs {
  _call: SetCrosschainAddressesCall;

  constructor(call: SetCrosschainAddressesCall) {
    this._call = call;
  }

  get _destinationSelectors(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _destinationAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetCrosschainAddressesCall__Outputs {
  _call: SetCrosschainAddressesCall;

  constructor(call: SetCrosschainAddressesCall) {
    this._call = call;
  }
}

export class SetNumWordsCall extends ethereum.Call {
  get inputs(): SetNumWordsCall__Inputs {
    return new SetNumWordsCall__Inputs(this);
  }

  get outputs(): SetNumWordsCall__Outputs {
    return new SetNumWordsCall__Outputs(this);
  }
}

export class SetNumWordsCall__Inputs {
  _call: SetNumWordsCall;

  constructor(call: SetNumWordsCall) {
    this._call = call;
  }

  get _numWords(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNumWordsCall__Outputs {
  _call: SetNumWordsCall;

  constructor(call: SetNumWordsCall) {
    this._call = call;
  }
}

export class SetProtocolAddressCall extends ethereum.Call {
  get inputs(): SetProtocolAddressCall__Inputs {
    return new SetProtocolAddressCall__Inputs(this);
  }

  get outputs(): SetProtocolAddressCall__Outputs {
    return new SetProtocolAddressCall__Outputs(this);
  }
}

export class SetProtocolAddressCall__Inputs {
  _call: SetProtocolAddressCall;

  constructor(call: SetProtocolAddressCall) {
    this._call = call;
  }

  get _protocolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProtocolAddressCall__Outputs {
  _call: SetProtocolAddressCall;

  constructor(call: SetProtocolAddressCall) {
    this._call = call;
  }
}

export class SetRequestConfirmationsCall extends ethereum.Call {
  get inputs(): SetRequestConfirmationsCall__Inputs {
    return new SetRequestConfirmationsCall__Inputs(this);
  }

  get outputs(): SetRequestConfirmationsCall__Outputs {
    return new SetRequestConfirmationsCall__Outputs(this);
  }
}

export class SetRequestConfirmationsCall__Inputs {
  _call: SetRequestConfirmationsCall;

  constructor(call: SetRequestConfirmationsCall) {
    this._call = call;
  }

  get _requestConfirmations(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetRequestConfirmationsCall__Outputs {
  _call: SetRequestConfirmationsCall;

  constructor(call: SetRequestConfirmationsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
